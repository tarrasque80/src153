
#ifndef __GNET_DBREFGETREFERRER_HPP
#define __GNET_DBREFGETREFERRER_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "integer"
#include "greferrer"
#include "dbrefgetreferrerres"

namespace GNET
{

class DBRefGetReferrer : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbrefgetreferrer"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		Integer *arg = (Integer *)argument;
		DBRefGetReferrerRes *res = (DBRefGetReferrerRes *)result;
		try
		{
			StorageEnv::Storage * puser = StorageEnv::GetStorage("user");
			StorageEnv::CommonTransaction txn;
			try
			{
				Marshal::OctetsStream key_user;
				key_user << arg->value;
				User u;
				Marshal::OctetsStream(puser->find(key_user,txn))>>u;
				GRefStore ref_store;
				if (u.reference.size())
				{
					Marshal::OctetsStream   os_ref(u.reference);
					os_ref >> ref_store;
					res->referrer = GReferrer(arg->value, ref_store.bonus_add);
					res->retcode = ERR_SUCCESS;
				}
				else
					res->retcode = ERR_NOTFOUND;
			}
			catch (DbException &e) { throw e; }
			catch ( ... )
			{
				DbException ee(DB_OLD_VERSION);
				txn.abort(ee);
				throw ee;
			}
		}
		catch (DbException &e)
		{
			Log::log(LOG_ERR, "gamedbd: DBRefGetReferrer failed, what=%s\n", e.what());
			res->retcode = ERR_FAILED;
		}

	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// Integer *arg = (Integer *)argument;
		// DBRefGetReferrerRes *res = (DBRefGetReferrerRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
