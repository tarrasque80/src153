
#ifndef __GNET_DBMAPPASSWORDLOAD_HPP
#define __GNET_DBMAPPASSWORDLOAD_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include <time.h>

#include "dbmappasswordloadarg"
#include "dbmappasswordloadres"

#define DB_MAPPASSWORD_EXPIRE_TIME 86400 // 1day

namespace GNET
{

class QueryLoadMapPassword : public StorageEnv::IQuery
{
public:
    QueryLoadMapPassword(std::vector<MapPasswordData>& data) : _data(data), _size(0), _total(0), _cur_time(time(NULL))
    {
        _remove_data.clear();
    }

    bool Update(StorageEnv::Transaction& txn, Octets& key, Octets& value)
    {
        try
        {
            if ((_total >= 1024) || (_size >= 131072))
            {
                _last = key;
                return false;
            }

            MapPasswordData userdata;
            Marshal::OctetsStream(key) >> (userdata.username);
            Marshal::OctetsStream(value) >> (userdata.value);

            if (_cur_time - userdata.value.refreshtime > DB_MAPPASSWORD_EXPIRE_TIME)
            {
                _remove_data.push_back(userdata.username);
            }
            else
            {
                _data.push_back(userdata);
                _size += key.size() + value.size();
                ++_total;
            }
        }
        catch (Marshal::Exception&)
        {
            Log::log(LOG_ERR, "QueryLoadMapPassword, unmarshal error.");
        }

        return true;
    }

    const Octets& GetHandle() const
    {
        return _last;
    }

    const OctetsVector& GetRemoveData() const
    {
        return _remove_data;
    }

private:
    std::vector<MapPasswordData>& _data;
    OctetsVector _remove_data;
    Octets _last;
    int _size;
    int _total;
    int _cur_time;
};


class DBMapPasswordLoad : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbmappasswordload"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBMapPasswordLoadArg *arg = (DBMapPasswordLoadArg *)argument;
		DBMapPasswordLoadRes *res = (DBMapPasswordLoadRes *)result;
        QueryLoadMapPassword q(res->data);

        try
        {
            StorageEnv::Storage* pdata = StorageEnv::GetStorage("mappassword");
            StorageEnv::AtomTransaction txn;

            try
            {
                StorageEnv::Storage::Cursor cursor = pdata->cursor(txn);
                cursor.walk(arg->handle, q);
                res->handle = q.GetHandle();
                res->retcode = ERR_SUCCESS;

                const OctetsVector& remove_data = q.GetRemoveData();
                OctetsVector::const_iterator iter = remove_data.begin();
                OctetsVector::const_iterator iter_end = remove_data.end();

                for (; iter != iter_end; ++iter)
                {
                    pdata->del((Marshal::OctetsStream() << (*iter)), txn);
                }

                LOG_TRACE("DBMapPasswordLoad, size=%d, handle=%d\n", res->data.size(), res->handle.size());
            }
            catch (DbException e) {throw;}
            catch (...)
            {
                DbException e(DB_OLD_VERSION);
                txn.abort(e);
                throw e;
            }
        }
        catch (DbException e)
        {
            if (e.get_errno() == DB_LOCK_DEADLOCK)
                res->retcode = ERR_AGAIN;
            else
                res->retcode = ERR_EXCEPTION;

            Log::log(LOG_ERR, "DBMapPasswordLoad, what=%s.\n", e.what());
        }
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// DBMapPasswordLoadArg *arg = (DBMapPasswordLoadArg *)argument;
		// DBMapPasswordLoadRes *res = (DBMapPasswordLoadRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
