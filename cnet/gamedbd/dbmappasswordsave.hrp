
#ifndef __GNET_DBMAPPASSWORDSAVE_HPP
#define __GNET_DBMAPPASSWORDSAVE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbmappasswordsavearg"
#include "dbmappasswordsaveres"

namespace GNET
{

class DBMapPasswordSave : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbmappasswordsave"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBMapPasswordSaveArg *arg = (DBMapPasswordSaveArg *)argument;
		DBMapPasswordSaveRes *res = (DBMapPasswordSaveRes *)result;

        try
        {
            StorageEnv::Storage* pdata = StorageEnv::GetStorage("mappassword");
            StorageEnv::AtomTransaction txn;

            typedef std::vector<MapPasswordData> MPVector;
            MPVector& data = arg->data;
            MPVector::const_iterator iter = data.begin();
            MPVector::const_iterator iter_end = data.end();

            LOG_TRACE("DBMapPasswordSave, size=%d\n", data.size());

            try
            {
                for (; iter != iter_end; ++iter)
                {
                    pdata->insert((Marshal::OctetsStream() << (iter->username)),
                                  (Marshal::OctetsStream() << (iter->value)),
                                  txn);
                }
                res->retcode = ERR_SUCCESS;
            }
            catch (DbException e) {throw;}
            catch (...)
            {
                DbException e(DB_OLD_VERSION);
                txn.abort(e);
                throw e;
            }
        }
        catch (DbException e)
        {
            if (e.get_errno() == DB_LOCK_DEADLOCK)
                res->retcode = ERR_AGAIN;
            else
                res->retcode = ERR_EXCEPTION;

            Log::log(LOG_ERR, "DBMapPasswordSave, what=%s.\n", e.what());
        }
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// DBMapPasswordSaveArg *arg = (DBMapPasswordSaveArg *)argument;
		// DBMapPasswordSaveRes *res = (DBMapPasswordSaveRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
