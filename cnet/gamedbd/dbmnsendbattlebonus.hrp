
#ifndef __GNET_DBMNSENDBATTLEBONUS_HPP
#define __GNET_DBMNSENDBATTLEBONUS_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include <vector>
#include "utilfunction.h"
#include "groleinventory"

#include "dbmnsendbattlebonusarg"
#include "dbmnsendbattlebonusres"


namespace GNET
{

class DBMNSendBattleBonus : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbmnsendbattlebonus"
#undef	RPC_BASECLASS

    void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
    {
        DBMNSendBattleBonusArg *arg = (DBMNSendBattleBonusArg *)argument;
        DBMNSendBattleBonusRes *res = (DBMNSendBattleBonusRes *)result;

        try
        {
            StorageEnv::Storage* pmnfaction = StorageEnv::GetStorage("mnfactioninfo");
            StorageEnv::Storage* pfaction = StorageEnv::GetStorage("factioninfo");
            StorageEnv::Storage* pmailbox = StorageEnv::GetStorage("mailbox");
            StorageEnv::AtomTransaction txn;

            try
            {
                Marshal::OctetsStream mnfid_key, mninfo_value;
                mnfid_key << (arg->bonus.unifid);

                if (!pmnfaction->find(mnfid_key, mninfo_value, txn))
                {
                    res->retcode = ERR_MNF_DATA_NOT_FOUND;
                    Log::log(LOG_ERR, "DBMNSendBattleBonus, faction not found. unifid=%lld, bouns_sn=%u.\n",
                        (arg->bonus.unifid), (arg->bonus.bonus_sn));
                    return;
                }

                MNFactionInfo mninfo;
                mninfo_value >> mninfo;

                if (arg->bonus.bonus_sn <= mninfo.bonus_sn)
                {
                    Log::log(LOG_ERR, "DBMNSendBattleBonus, bonus_sn mismatch. unifid=%lld, bonus.bonus_sn=%u, mninfo.bonus_sn=%u.\n",
                        (arg->bonus.unifid), (arg->bonus.bonus_sn), mninfo.bonus_sn);
                    return;
                }

                Marshal::OctetsStream fid_key, info_value;
                fid_key << (mninfo.fid);

                unsigned int master_id = 0;
                if (pfaction->find(fid_key, info_value, txn))
                {
                    GFactionInfo info;
                    info_value >> info;
                    master_id = info.master.rid;
                }

                if (master_id > 0)
                {
                    GRoleInventory inv;
                    inv.id = arg->bonus.master_reward.item_id;
                    inv.count = arg->bonus.master_reward.item_num;
                    inv.max_count = arg->bonus.master_reward.max_count;
                    inv.proctype = arg->bonus.master_reward.proc_type;

                    if ((inv.id <= 0) || (inv.count <= 0))
                    {
                        Log::log(LOG_INFO, "DBMNSendBattleBonus, master reward item error or no reward. unifid=%lld, bonus_sn=%u, master_id=%u, item_id=%d, item_num=%d.\n",
                            (arg->bonus.unifid), (arg->bonus.bonus_sn), master_id, inv.id, inv.count);
                    }
                    else
                    {
                        GMailHeader header;
                        header.id = 0;
                        header.sender = SENDER_BATTLE_BONUS_MASTER;
                        header.sndr_type = _MST_MNFBATTLE;
                        header.receiver = master_id;
                        MailSender::Send(pmailbox, header, inv, 0, txn);
                        res->maillist.push_back(header);

                        Log::formatlog("dbmnsendbattlebonus_master", "unifid=%lld:bonussn=%u:sender=%d:sendertype=%d:receiver=%d:rewarditemid=%d:rewarditemnum=%d",
                            (arg->bonus.unifid), (arg->bonus.bonus_sn), header.sender, header.sndr_type, header.receiver, inv.id, inv.count);
                    }
                }

                int count = 0;
                const MNDomainBonusRewardItemVector& reward = arg->bonus.reward_list;
                std::vector<int>::const_iterator iter = arg->bonus.rolelist.begin(), iter_end = arg->bonus.rolelist.end();
                for (; iter != iter_end; ++iter)
                {
                    if (*iter <= 0) continue;
                    for (size_t i = 0; i < reward.size(); ++i)
                    {
                        GRoleInventory inv;
                        inv.id = reward[i].item_id;
                        inv.count = reward[i].item_num;
                        inv.max_count = reward[i].max_count;
                        inv.proctype = reward[i].proc_type;

                        if ((inv.id <= 0) || (inv.count <= 0))
                        {
                            Log::log(LOG_INFO, "DBMNSendBattleBonus, member reward item error or no reward. unifid=%lld, bonus_sn=%u, item_id=%d, item_num=%d.\n",
                                (arg->bonus.unifid), (arg->bonus.bonus_sn), inv.id, inv.count);
                            continue;
                        }

                        GMailHeader header;
                        header.id = 0;
                        header.sender = SENDER_BATTLE_BONUS_MASTER + (i + 1);
                        header.sndr_type = _MST_MNFBATTLE;
                        header.receiver = *iter;
                        MailSender::Send(pmailbox, header, inv, 0, txn);
                        res->maillist.push_back(header);
                    }
                    ++count;
                }

                mninfo.bonus_sn = arg->bonus.bonus_sn;
                pmnfaction->insert(mnfid_key, (Marshal::OctetsStream() << mninfo), txn);
                res->retcode = ERR_SUCCESS;

                Log::formatlog("dbmnsendbattlebonus_member", "unifid=%lld:bonussn=%u:sendertype=%d:membernum=%d:rewardnum=%d:bonuscount=%d",
                    (arg->bonus.unifid), (arg->bonus.bonus_sn), _MST_MNFBATTLE, (arg->bonus.rolelist.size()), (reward.size()), count);

                for (size_t i = 0; i < reward.size(); ++i)
                {
                    Log::formatlog("dbmnsendbattlebonus_member", "unifid=%lld:bonussn=%u:sendertype=%d:reward%d:itemid=%d:itemnum=%d",
                        (arg->bonus.unifid), (arg->bonus.bonus_sn), _MST_MNFBATTLE, (i + 1), (reward[i].item_id), (reward[i].item_num));
                }
            }
            catch (DbException e) {throw;}
            catch (...)
            {
                DbException e(DB_OLD_VERSION);
                txn.abort(e);
                throw e;
            }
        }
        catch (DbException e)
        {
            Log::log(LOG_ERR, "DBMNSendBattleBonus, what=%s.\n", e.what());
        }
    }

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// DBMNSendBattleBonusArg *arg = (DBMNSendBattleBonusArg *)argument;
		// DBMNSendBattleBonusRes *res = (DBMNSendBattleBonusRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
