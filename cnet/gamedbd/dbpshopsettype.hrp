#ifndef __GNET_DBPSHOPSETTYPE_HPP
#define __GNET_DBPSHOPSETTYPE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbpshopsettypearg"
#include "dbpshopsettyperes"

namespace GNET
{

class DBPShopSetType : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbpshopsettype"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBPShopSetTypeArg *arg = (DBPShopSetTypeArg *)argument;
		DBPShopSetTypeRes *res = (DBPShopSetTypeRes *)result;
		try
		{
			StorageEnv::Storage * pshop = StorageEnv::GetStorage("playershop");
			StorageEnv::CommonTransaction txn;
			try
			{
				//获取店铺
                Marshal::OctetsStream key;
				key << arg->roleid;
				PShopDetail shop;
				Marshal::OctetsStream(pshop->find(key, txn)) >> shop;
				if(shop.shoptype == arg->newtype)
					throw DbException(DB_VERIFY_BAD);
				if(!PShopFunc::OptionPolicy(shop, PShopFunc::PSHOP_OP_SET_TYPE))
					throw DbException(DB_VERIFY_BAD);

				LOG_TRACE("DBPShopSetType, roleid=%d,oldtype=%d,newtype=%d", arg->roleid,shop.shoptype,arg->newtype);

				//更新DB
				shop.shoptype = arg->newtype;
				pshop->insert(key, Marshal::OctetsStream()<<shop,txn);
				res->retcode = ERR_SUCCESS;
			}
			catch(DbException e) { throw; }
			catch(...)
			{
				DbException ee(DB_OLD_VERSION);
				txn.abort(ee);
				throw ee;
			}
		}
		catch(DbException e)
		{
			Log::log(LOG_ERR, "DBPShopSetType, roleid=%d, what=%s\n", arg->roleid, e.what());
			res->retcode = ERR_VERIFYFAILED;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// DBPShopSetTypeArg *arg = (DBPShopSetTypeArg *)argument;
		// DBPShopSetTypeRes *res = (DBPShopSetTypeRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}
};

};
#endif
