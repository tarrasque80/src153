
#ifndef __GNET_DBDELFACTIONFORTRESS_HPP
#define __GNET_DBDELFACTIONFORTRESS_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbdelfactionfortressarg"
#include "dbdelfactionfortressres"

namespace GNET
{

class DBDelFactionFortress : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbdelfactionfortress"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBDelFactionFortressArg *arg = (DBDelFactionFortressArg *)argument;
		DBDelFactionFortressRes *res = (DBDelFactionFortressRes *)result;
		LOG_TRACE( "DBDelFactionFortress, factionid=%d.", arg->factionid);

		try
		{
			StorageEnv::Storage * pfortress = StorageEnv::GetStorage("factionfortress");
			StorageEnv::CommonTransaction txn;
			try
			{
				Marshal::OctetsStream key;
				key << arg->factionid;
				
				GFactionFortressDetail detail;
				Marshal::OctetsStream(pfortress->find(key, txn)) >> detail;
				
				if(detail.factionid != arg->factionid)
				{
					Log::log( LOG_ERR, "DBDelFactionFortress, key.id(%d)!=value.id(%d)\n", arg->factionid, detail.factionid);
					res->retcode = ERR_EXCEPTION;
					return;
				}
			
				pfortress->del(key, txn);

				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException ee( DB_OLD_VERSION );
				txn.abort( ee );
				throw ee;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "DBDelFactionFortress, factionid=%d, what=%s\n", arg->factionid, e.what() );
			res->retcode = ERR_EXCEPTION;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// DBDelFactionFortressArg *arg = (DBDelFactionFortressArg *)argument;
		// DBDelFactionFortressRes *res = (DBDelFactionFortressRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
