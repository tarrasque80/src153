
#ifndef __GNET_DBWEBTRADEPOST_HPP
#define __GNET_DBWEBTRADEPOST_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbwebtradepostarg"
#include "dbwebtradepostres"
#include "gwebtraderolebrief"

namespace GNET
{

class DBWebTradePost : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbwebtradepost"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBWebTradePostArg *arg = (DBWebTradePostArg *)argument;
		DBWebTradePostRes *res = (DBWebTradePostRes *)result;

		Marshal::OctetsStream key;
		try
		{
			StorageEnv::Storage * pwebtrade = StorageEnv::GetStorage("webtrade");
			StorageEnv::CommonTransaction txn;
			try
			{
				if(arg->sn == 0) 
					throw DbException(DB_VERIFY_BAD); 

				GWebTradeDetail detail;
				key << arg->sn;
				Marshal::OctetsStream(pwebtrade->find(key,txn)) >> detail;
				if(detail.info.seller_roleid != arg->roleid)
					throw DbException(DB_VERIFY_BAD);
				Log::formatlog("webtradepost","role=%d:sn=%lld:commodity_id=%d:type=%d:itemid=%d:item_count=%d:money=%d:role=%d:petid=%d:pet_count=%d",
						arg->roleid,arg->sn,arg->commodity_id,detail.info.posttype,detail.info.item_id,detail.info.item_count,detail.info.money,arg->roleid,0,0);
				//存盘	
				detail.info.state = arg->state;
				detail.info.post_endtime = arg->post_endtime;
				detail.info.show_endtime = arg->show_endtime;
				detail.info.sell_endtime = arg->sell_endtime;
				detail.info.commodity_id = arg->commodity_id;
				if(detail.info.posttype == 4 && detail.rolebrief.size() > 256)
				{
					//交易平台已寄售成功，游戏内精简一下数据
					GWebTradeRoleBrief brief;
					Marshal::OctetsStream(detail.rolebrief) >> brief;
					brief.petcorral.clear();
					brief.property.clear();
					brief.skills.clear();
					brief.inventory = GRolePocket();
					brief.equipment = GRoleEquipment();
					brief.storehouse = GRoleStorehouse();
					brief.force_data.clear();
					detail.rolebrief = Marshal::OctetsStream()<<brief;
				}
				pwebtrade->insert(key, Marshal::OctetsStream()<<detail,txn);
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException e( DB_OLD_VERSION );
				txn.abort( e );
				throw e;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "DBWebTradePost, role=%d sn=%lld, what=%s.\n",
				arg->roleid, arg->sn, e.what());
			res->retcode = ERR_EXCEPTION;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// DBWebTradePostArg *arg = (DBWebTradePostArg *)argument;
		// DBWebTradePostRes *res = (DBWebTradePostRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
