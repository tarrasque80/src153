
#ifndef __GNET_GETMONEYINVENTORY_HPP
#define __GNET_GETMONEYINVENTORY_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"
#include "dbbuffer.h"
#include "getmoneyinventoryarg"
#include "getmoneyinventoryres"

namespace GNET
{

class GetMoneyInventory : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "getmoneyinventory"
#undef	RPC_BASECLASS

	bool ReadData(GetMoneyInventoryArg *arg, GetMoneyInventoryRes *res)
	{
		Marshal::OctetsStream key;
		try
		{
			StorageEnv::Storage * pinventory = StorageEnv::GetStorage("inventory");
			StorageEnv::AtomTransaction txn;
			try
			{
				key << arg->roleid;
				GRolePocket	pocket;
				Marshal::OctetsStream( pinventory->find( key, txn ) ) >> pocket;
				res->goods.swap(pocket.items);
				res->timestamp = pocket.timestamp;
				res->money = pocket.money;
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException ee( DB_OLD_VERSION );
				txn.abort( ee );
				throw ee;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "GetMoneyInventory, roleid=%d, what=%s\n", arg->roleid, e.what() );
			res->retcode = ERR_DATANOTFIND;
			if(e.get_errno()==DB_LOCK_DEADLOCK)
				return false;
		}
		return true;
	}

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		GetMoneyInventoryArg *arg = (GetMoneyInventoryArg *)argument;
		GetMoneyInventoryRes *res = (GetMoneyInventoryRes *)result;

		LOG_TRACE( "GetMoneyInventory, roleid=%d mask=%d.\n", arg->roleid, arg->data_mask );
		if(!ReadData(arg,res))
		{
			usleep(100000);
			if(!ReadData(arg,res))
				Log::log( LOG_ERR, "GetMoneyInventory, roleid=%d, retry failed\n", arg->roleid);
		}
		res->data_mask = arg->data_mask;
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
	}

	void OnTimeout()
	{
	}

};

};
#endif
