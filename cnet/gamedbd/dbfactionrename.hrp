
#ifndef __GNET_DBFACTIONRENAME_HPP
#define __GNET_DBFACTIONRENAME_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbfactionrenamearg"
#include "dbfactionrenameres"
#include "gfactioninfo"
#include "utilfunction.h"
#include "gfactionextenddata"

namespace GNET
{

class DBFactionRename : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbfactionrename"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBFactionRenameArg *arg = (DBFactionRenameArg *)argument;
		DBFactionRenameRes *res = (DBFactionRenameRes *)result;
		
		unsigned int orignal_money = arg->syncdata.inventory.money;
		
		LOG_TRACE("DBFactionRename, roleid=%d itemid=%d item_pos=%d item_num=%d", arg->rid, arg->item_id, arg->item_pos, arg->item_num);

		try
		{
			StorageEnv::Storage * pinventory = StorageEnv::GetStorage("inventory");
			StorageEnv::Storage * pequipment = StorageEnv::GetStorage("equipment");
			StorageEnv::Storage * pstorehouse = StorageEnv::GetStorage("storehouse");
			StorageEnv::Storage * pinfo = StorageEnv::GetStorage("factioninfo");
			StorageEnv::Storage * pname = StorageEnv::GetStorage("factionname");
			StorageEnv::Storage * pmnfaction = StorageEnv::GetStorage("mnfactioninfo");
			StorageEnv::Storage * plog = arg->syncdata.logs.size()?StorageEnv::GetStorage("shoplog"):NULL;
			
			StorageEnv::CommonTransaction txn;
			try
			{
				Marshal::OctetsStream krole, kfaction, vinfo;
				krole << arg->rid;
			
				GRolePocket pocket;
				Marshal::OctetsStream(pinventory->find(krole, txn)) >> pocket;
				if (arg->syncdata.inventory.timestamp <= pocket.timestamp)
				{
					Log::log(LOG_ERR,"DBFactionRename, timestamp mismatch. roleid=%d (%d<%d)",
						arg->rid, arg->syncdata.inventory.timestamp, pocket.timestamp);
					throw DbException(DB_VERIFY_BAD);
				}

				int money_delta = arg->syncdata.inventory.money - pocket.money;
				// 修改背包物品，减少数量
				GRoleInventoryVector::iterator it;
				GRoleInventoryVector& v = arg->syncdata.inventory.items;
				unsigned int pos;
				for(pos=0;pos<v.size();pos++)
				{
					if (v[pos].pos == arg->item_pos)
						break;
				}
				if (pos >= v.size())
					throw DbException(DB_VERIFY_BAD);

				int count = arg->item_num;
				if (v[pos].id != (unsigned int)(arg->item_id) || count > v[pos].count)
					throw DbException(DB_VERIFY_BAD);
				if (v[pos].count == count)
				{
					v[pos].count = 0;
					res->syncdata.inventory.items.push_back(v[pos]);
					v.erase(v.begin()+pos);
				}
				else
				{
					v[pos].count -= count;
					res->syncdata.inventory.items.push_back(v[pos]);
				}
				//开始存库
				pinventory->insert(krole, Marshal::OctetsStream()<<arg->syncdata.inventory, txn);
				pequipment->insert(krole, Marshal::OctetsStream()<<arg->syncdata.equipment,txn);
				WriteRestSyncData(pstorehouse, plog, arg->rid, arg->syncdata, money_delta, txn);

				kfaction << arg->fid;

				if(!pinfo->find(kfaction,vinfo,txn))
					throw DbException(DB_VERIFY_BAD);
				GFactionInfo info;
				vinfo >> info;
				res->oldname = info.name;
				info.name = arg->newname;
				
				if(info.extenddata.size())
				{
					GFactionExtendData exdata;
					Marshal::OctetsStream(info.extenddata) >> exdata;
					int64_t unifid = exdata.unifid;
					if(unifid)	IncMNFactionVersion(unifid,pmnfaction,txn);
				}

				pinfo->insert(kfaction,Marshal::OctetsStream()<<info,txn);
				pname->insert(Marshal::OctetsStream()<< arg->newname, Marshal::OctetsStream()<<arg->fid,txn);
				res->syncdata.inventory.money = orignal_money;
				res->retcode = ERR_SUCCESS;
				
				Log::formatlog("dbfactionrename success", "factionid=%d roleid=%d itemid=%d item_pos=%d item_num=%d",
						arg->fid, arg->rid, arg->item_id, arg->item_pos, arg->item_num);
			}
			catch( DbException e ) { throw; }
			catch( ... )
			{
				DbException ee( DB_OLD_VERSION );
				txn.abort( ee );
				throw ee;
			}
		}
		catch( DbException e )
		{
			Log::log( LOG_ERR, "DBFactionRename, roleid=%d, what=%s\n", arg->rid, e.what() );
			res->retcode = ERR_VERIFYFAILED;
			res->syncdata.inventory.money = orignal_money;
			res->syncdata.inventory.items.clear();
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// DBFactionRenameArg *arg = (DBFactionRenameArg *)argument;
		// DBFactionRenameRes *res = (DBFactionRenameRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
