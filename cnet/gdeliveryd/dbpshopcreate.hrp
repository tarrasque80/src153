#ifndef __GNET_DBPSHOPCREATE_HPP
#define __GNET_DBPSHOPCREATE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"
#include "gdeliveryserver.hpp"
#include "gproviderserver.hpp"
#include "pshopcreate_re.hpp"
#include "dbpshopget.hrp"
#include "pshopmarket.h"

#include "dbpshopcreatearg"
#include "dbpshopcreateres"
#include "gmailsyncdata"
#include "pshopdetail"

namespace GNET
{

class DBPShopCreate : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbpshopcreate"
#undef	RPC_BASECLASS

	unsigned int save_gsid;
	unsigned int save_linksid;
	unsigned int save_localsid;

	void SendResult(int retcode)
	{
		GDeliveryServer::GetInstance()->Send(save_linksid, PShopCreate_Re(retcode, save_localsid));
	}
	void SyncGameServer(int roleid, int retcode, const GMailSyncData& data)
	{
		GProviderServer::GetInstance()->DispatchProtocol(save_gsid, GMailEndSync(0,retcode, roleid, data));
	}
	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid) {}
	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBPShopCreateArg *arg = (DBPShopCreateArg *)argument;
		DBPShopCreateRes *res = (DBPShopCreateRes *)result;
		LOG_TRACE("DBPShopCreate: RPC return, roleid=%d retcode=%d", arg->roleid, res->retcode);
		if(res->retcode == ERR_SUCCESS)
		{
			PShopMarket::GetInstance().AddShop(res->shop);
		}

		SendResult(res->retcode);//通知客户端
		SyncGameServer(arg->roleid, res->retcode, res->syncdata);//通知GS解锁玩家
	}

	void OnTimeout()
	{
		DBPShopCreateArg *arg = (DBPShopCreateArg *)argument;
		Log::log(LOG_ERR,"DBPShopCreate: Timeout. roleid=%d.", arg->roleid);
		SendResult(ERR_TIMEOUT);//通知客户端超时
		DBPShopGet::QueryShop(arg->roleid, save_linksid, save_localsid, 3, DBPShopGet::REASON_DB_TIMEOUT);
	}

};

};
#endif
