#ifndef __GNET_DBPSHOPDRAWITEM_HPP
#define __GNET_DBPSHOPDRAWITEM_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbpshopdrawitemarg"
#include "dbpshopdrawitemres"
#include "pshopdrawitem_re.hpp"
#include "dbpshopget.hrp"

namespace GNET
{

class DBPShopDrawItem : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbpshopdrawitem"
#undef	RPC_BASECLASS

	unsigned int save_gsid;
	unsigned int save_linksid;
	unsigned int save_localsid;

	void SendResult(int retcode, int item_pos)
	{
		GDeliveryServer::GetInstance()->Send(save_linksid, PShopDrawItem_Re(retcode, save_localsid, item_pos));
	}
	void SyncGameServer(int roleid, int retcode, const GMailSyncData& data)
	{
		GProviderServer::GetInstance()->DispatchProtocol(save_gsid, GMailEndSync(0, retcode, roleid, data));
	}
	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid) {}
	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBPShopDrawItemArg *arg = (DBPShopDrawItemArg *)argument;
		DBPShopDrawItemRes *res = (DBPShopDrawItemRes *)result;
		LOG_TRACE("DBPShopDrawItem: RPC return, roleid=%d retcode=%d", arg->roleid, res->retcode);
		if(res->retcode == ERR_SUCCESS)
		{
			//注意:这里GDELIVERY可能未缓存店铺数据
			//因为店铺过期状态也可以进行取消操作
			PShopObj *obj = PShopMarket::GetInstance().GetShop(arg->roleid);
			if(obj)
			{
				obj->RemoveItemStore(arg->item_pos);
				obj->Trace();
			}
		}

		SendResult(res->retcode, arg->item_pos);
		SyncGameServer(arg->roleid, res->retcode, res->syncdata);
	}

	void OnTimeout()
	{
		DBPShopDrawItemArg *arg = (DBPShopDrawItemArg *)argument;
		Log::log(LOG_ERR,"DBPShopDrawItem: Timeout. roleid=%d.", arg->roleid);
		SendResult(ERR_TIMEOUT, arg->item_pos);
		DBPShopGet::QueryShop(arg->roleid, save_linksid, save_localsid, 3, DBPShopGet::REASON_DB_TIMEOUT);
	}
};

};
#endif
