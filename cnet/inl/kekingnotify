	public:
		int roleid;
		int end_time;
		enum { PROTOCOL_TYPE = PROTOCOL_KEKINGNOTIFY };
	public:
		KEKingNotify() { type = PROTOCOL_KEKINGNOTIFY; }
		KEKingNotify(void*) : Protocol(PROTOCOL_KEKINGNOTIFY) { }
		KEKingNotify (int l_roleid,int l_end_time)
			 : roleid(l_roleid),end_time(l_end_time)
		{
			type = PROTOCOL_KEKINGNOTIFY;
		}

		KEKingNotify(const KEKingNotify &rhs)
			: Protocol(rhs),roleid(rhs.roleid),end_time(rhs.end_time) { }

		GNET::Protocol *Clone() const { return new KEKingNotify(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << end_time;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> end_time;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 32; }
