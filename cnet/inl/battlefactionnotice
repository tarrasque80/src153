	public:
		std::vector<int> factionids;
		enum { PROTOCOL_TYPE = PROTOCOL_BATTLEFACTIONNOTICE };
	public:
		BattleFactionNotice() { type = PROTOCOL_BATTLEFACTIONNOTICE; }
		BattleFactionNotice(void*) : Protocol(PROTOCOL_BATTLEFACTIONNOTICE) { }
		BattleFactionNotice (const std::vector<int>& l_factionids)
			 : factionids(l_factionids)
		{
			type = PROTOCOL_BATTLEFACTIONNOTICE;
		}

		BattleFactionNotice(const BattleFactionNotice &rhs)
			: Protocol(rhs),factionids(rhs.factionids) { }

		GNET::Protocol *Clone() const { return new BattleFactionNotice(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << factionids;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> factionids;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 512; }
