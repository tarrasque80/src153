	public:
		int roleid;
		int leader_id;
		enum { PROTOCOL_TYPE = PROTOCOL_AUTOTEAMPLAYERREADY };
	public:
		AutoTeamPlayerReady() { type = PROTOCOL_AUTOTEAMPLAYERREADY; }
		AutoTeamPlayerReady(void*) : Protocol(PROTOCOL_AUTOTEAMPLAYERREADY) { }
		AutoTeamPlayerReady (int l_roleid,int l_leader_id)
			 : roleid(l_roleid),leader_id(l_leader_id)
		{
			type = PROTOCOL_AUTOTEAMPLAYERREADY;
		}

		AutoTeamPlayerReady(const AutoTeamPlayerReady &rhs)
			: Protocol(rhs),roleid(rhs.roleid),leader_id(rhs.leader_id) { }

		GNET::Protocol *Clone() const { return new AutoTeamPlayerReady(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << leader_id;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> leader_id;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 32; }
