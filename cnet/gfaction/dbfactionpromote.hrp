
#ifndef __GNET_DBFACTIONPROMOTE_HPP
#define __GNET_DBFACTIONPROMOTE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbfactionpromotearg"
#include "dbfactionpromoteres"

namespace GNET
{

class DBFactionPromote : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbfactionpromote"
#undef	RPC_BASECLASS
	OperWrapper::wref_t oper;

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBFactionPromoteArg *arg = (DBFactionPromoteArg *)argument;
		DBFactionPromoteRes *res = (DBFactionPromoteRes *)result;
		OperWrapper::href_t ref(oper);
		if(ref)
		{
			ref->SetResult(result);
			ref->Execute();
		}
		if(res->retcode==ERR_SUCCESS)
		{
			Factiondb::GetInstance()->OnPromote(arg->fid, arg->superior, arg->roleid, res->suprole, res->newrole );
		}
	}

	void OnTimeout(Rpc::Data *argument)
	{
		DBFactionPromoteArg *arg = (DBFactionPromoteArg *)argument;
		Log::log(LOG_ERR,"DBFactionPromote, timeout %d %d %d.", arg->fid, arg->superior, arg->roleid);
	}

};

};
#endif
