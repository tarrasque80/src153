
#ifndef __GNET_DBFACTIONRENAME_HPP
#define __GNET_DBFACTIONRENAME_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbfactionrenamearg"
#include "dbfactionrenameres"
#include "factiondb.h"
#include "gfactionserver.hpp"
#include "gfs_io.h"
#include "log.h"

namespace GNET
{

class DBFactionRename : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbfactionrename"
#undef	RPC_BASECLASS
	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// DBFactionRenameArg *arg = (DBFactionRenameArg *)argument;
		// DBFactionRenameRes *res = (DBFactionRenameRes *)result;
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		DBFactionRenameArg *arg = (DBFactionRenameArg *)argument;
		DBFactionRenameRes *res = (DBFactionRenameRes *)result;
		
		if(res->retcode == ERR_SUCCESS)
		{
			DEBUG_PRINT("faction:%d rename db save role:%d success.\n",arg->fid,arg->rid);
			Factiondb::GetInstance()->OnFactionRename(arg->fid,arg->newname);
			gps_send_factionrename_second_re(arg->rid,res->retcode,arg->newname,res->oldname);
			gfs_broadcast_factionrenameannounce(arg->fid,arg->rid,res->retcode,arg->newname);
			uns_send_postfactionrename(res->retcode,
					GFactionServer::GetInstance()->zoneid,
					arg->fid,arg->newname,res->oldname);
		}
		else
		{
			Log::log(LOG_ERR,"faction:%d rename db save role:%d failed.\n",arg->fid,arg->rid);
			gfs_send_factionrenameannounce(arg->rid,res->retcode,arg->newname);
			uns_send_postfactionrename(res->retcode,
					GFactionServer::GetInstance()->zoneid,
					arg->fid,arg->newname);
		}
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
