
#ifndef __GNET_DBFACTIONALLIANCEAPPLY_HPP
#define __GNET_DBFACTIONALLIANCEAPPLY_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbfactionallianceapplyarg"


namespace GNET
{

class DBFactionAllianceApply : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbfactionallianceapply"
#undef	RPC_BASECLASS
	OperWrapper::wref_t oper;

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// DBFactionAllianceApplyArg *arg = (DBFactionAllianceApplyArg *)argument;
		// RpcRetcode *res = (RpcRetcode *)result;
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		DBFactionAllianceApplyArg *arg = (DBFactionAllianceApplyArg *)argument;
		RpcRetcode *res = (RpcRetcode *)result;
		
		OperWrapper::href_t ref(oper);
		if(ref)
		{
			ref->SetResult(result);
			ref->Execute();
		}
		if(res->retcode==ERR_SUCCESS)
			Factiondb::GetInstance()->OnAllianceApply(arg->fid, arg->dst_fid, arg->end_time, arg->op_time);
	}

	void OnTimeout()
	{
		// TODO Client Only
		DBFactionAllianceApplyArg *arg = (DBFactionAllianceApplyArg *)argument;
		Log::log(LOG_ERR,"DBFactionAllianceApply timeout. fid=%d, dst_fid=%d.", arg->fid, arg->dst_fid);
	}

};

};
#endif
