#ifndef __GNET_GREWARDSTORE_RPCDATA
#define __GNET_GREWARDSTORE_RPCDATA

#include "rpcdefs.h"

#include "grewarditem"

namespace GNET
{
	class GRewardStore : public GNET::Rpc::Data
	{
	public:
		int consume_points;
		int bonus_reward;
		GRewardItemVector rewardlist;
		Octets cash_vip_info;
		int reserved2;
		int reserved3;
		int reserved4;

	public:
		GRewardStore (int l_consume_points = 0,int l_bonus_reward = 0,const Octets& l_cash_vip_info = Octets(0)
			,int l_reserved2 = 0,int l_reserved3 = 0,int l_reserved4 = 0)
			: consume_points(l_consume_points),bonus_reward(l_bonus_reward),cash_vip_info(l_cash_vip_info)
			,reserved2(l_reserved2),reserved3(l_reserved3),reserved4(l_reserved4)
		{
		}

		GRewardStore(const GRewardStore &rhs)
			: consume_points(rhs.consume_points),bonus_reward(rhs.bonus_reward),rewardlist(rhs.rewardlist),
			cash_vip_info(rhs.cash_vip_info),reserved2(rhs.reserved2),reserved3(rhs.reserved3),
			reserved4(rhs.reserved4) { }

		Rpc::Data *Clone() const { return new GRewardStore(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GRewardStore *r = dynamic_cast<const GRewardStore *>(&rhs);
			if (r && r != this)
			{
				consume_points = r->consume_points;
				bonus_reward = r->bonus_reward;
				rewardlist = r->rewardlist;
				cash_vip_info = r->cash_vip_info;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		GRewardStore& operator = (const GRewardStore &rhs)
		{
			const GRewardStore *r = &rhs;
			if (r && r != this)
			{
				consume_points = r->consume_points;
				bonus_reward = r->bonus_reward;
				rewardlist = r->rewardlist;
				cash_vip_info = r->cash_vip_info;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << consume_points;
			os << bonus_reward;
			os << rewardlist;
			os << cash_vip_info;
			os << reserved2;
			os << reserved3;
			os << reserved4;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> consume_points;
			os >> bonus_reward;
			os >> rewardlist;
			os >> cash_vip_info;
			os >> reserved2;
			os >> reserved3;
			os >> reserved4;
			return os;
		}

	};
};
#endif
