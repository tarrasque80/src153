#ifndef __GNET_DBFACTIONRELATIONTIMEOUTARG_RPCDATA
#define __GNET_DBFACTIONRELATIONTIMEOUTARG_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class DBFactionRelationTimeoutArg : public GNET::Rpc::Data
	{
	public:
		int type;
		int fid1;
		int fid2;

	public:
		DBFactionRelationTimeoutArg (int l_type = 0,int l_fid1 = 0,int l_fid2 = 0)
			: type(l_type),fid1(l_fid1),fid2(l_fid2)
		{
		}

		DBFactionRelationTimeoutArg(const DBFactionRelationTimeoutArg &rhs)
			: type(rhs.type),fid1(rhs.fid1),fid2(rhs.fid2) { }

		Rpc::Data *Clone() const { return new DBFactionRelationTimeoutArg(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBFactionRelationTimeoutArg *r = dynamic_cast<const DBFactionRelationTimeoutArg *>(&rhs);
			if (r && r != this)
			{
				type = r->type;
				fid1 = r->fid1;
				fid2 = r->fid2;
			}
			return *this;
		}

		DBFactionRelationTimeoutArg& operator = (const DBFactionRelationTimeoutArg &rhs)
		{
			const DBFactionRelationTimeoutArg *r = &rhs;
			if (r && r != this)
			{
				type = r->type;
				fid1 = r->fid1;
				fid2 = r->fid2;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << type;
			os << fid1;
			os << fid2;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> type;
			os >> fid1;
			os >> fid2;
			return os;
		}

	};
};
#endif
