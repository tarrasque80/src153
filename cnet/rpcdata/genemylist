#ifndef __GNET_GENEMYLIST_RPCDATA
#define __GNET_GENEMYLIST_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class GEnemyList : public GNET::Rpc::Data
	{
	public:
		int rid;
		char cls;
		char type;
		int add_time;
		Octets name;
		int reserved1;
		int reserved2;
		int reserved3;
		int reserved4;

	public:
		GEnemyList (int l_rid = 0,char l_cls = 0,char l_type = 0
			,int l_add_time = 0,const Octets& l_name = Octets(),int l_reserved1 = 0
			,int l_reserved2 = 0,int l_reserved3 = 0,int l_reserved4 = 0)
			: rid(l_rid),cls(l_cls),type(l_type)
			,add_time(l_add_time),name(l_name),reserved1(l_reserved1)
			,reserved2(l_reserved2),reserved3(l_reserved3),reserved4(l_reserved4)
		{
		}

		GEnemyList(const GEnemyList &rhs)
			: rid(rhs.rid),cls(rhs.cls),type(rhs.type),
			add_time(rhs.add_time),name(rhs.name),reserved1(rhs.reserved1),
			reserved2(rhs.reserved2),reserved3(rhs.reserved3),reserved4(rhs.reserved4) { }

		Rpc::Data *Clone() const { return new GEnemyList(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GEnemyList *r = dynamic_cast<const GEnemyList *>(&rhs);
			if (r && r != this)
			{
				rid = r->rid;
				cls = r->cls;
				type = r->type;
				add_time = r->add_time;
				name = r->name;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		GEnemyList& operator = (const GEnemyList &rhs)
		{
			const GEnemyList *r = &rhs;
			if (r && r != this)
			{
				rid = r->rid;
				cls = r->cls;
				type = r->type;
				add_time = r->add_time;
				name = r->name;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << rid;
			os << cls;
			os << type;
			os << add_time;
			os << name;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			os << reserved4;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> rid;
			os >> cls;
			os >> type;
			os >> add_time;
			os >> name;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			os >> reserved4;
			return os;
		}

	};
	typedef GNET::RpcDataVector<GEnemyList>	GEnemyListVector;
};
#endif
