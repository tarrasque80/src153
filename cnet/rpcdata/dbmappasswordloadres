#ifndef __GNET_DBMAPPASSWORDLOADRES_RPCDATA
#define __GNET_DBMAPPASSWORDLOADRES_RPCDATA

#include "rpcdefs.h"

#include "mappassworddata"

namespace GNET
{
	class DBMapPasswordLoadRes : public GNET::Rpc::Data
	{
	public:
		int retcode;
		std::vector<MapPasswordData> data;
		Octets handle;

	public:
		DBMapPasswordLoadRes (int l_retcode = -1,const std::vector<MapPasswordData>& l_data = std::vector<MapPasswordData>(),const Octets& l_handle = Octets())
			: retcode(l_retcode),data(l_data),handle(l_handle)
		{
		}

		DBMapPasswordLoadRes(const DBMapPasswordLoadRes &rhs)
			: retcode(rhs.retcode),data(rhs.data),handle(rhs.handle) { }

		Rpc::Data *Clone() const { return new DBMapPasswordLoadRes(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBMapPasswordLoadRes *r = dynamic_cast<const DBMapPasswordLoadRes *>(&rhs);
			if (r && r != this)
			{
				retcode = r->retcode;
				data = r->data;
				handle = r->handle;
			}
			return *this;
		}

		DBMapPasswordLoadRes& operator = (const DBMapPasswordLoadRes &rhs)
		{
			const DBMapPasswordLoadRes *r = &rhs;
			if (r && r != this)
			{
				retcode = r->retcode;
				data = r->data;
				handle = r->handle;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << data;
			os << handle;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> data;
			os >> handle;
			return os;
		}

	};
};
#endif
