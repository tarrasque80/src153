#ifndef __GNET_ADDFACTIONARG_RPCDATA
#define __GNET_ADDFACTIONARG_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class AddFactionArg : public GNET::Rpc::Data
	{
	public:
		Octets name;
		unsigned int rid;
		unsigned int fid;

	public:
		AddFactionArg (const Octets& l_name = Octets(0),unsigned int l_rid = 0,unsigned int l_fid = 0)
			: name(l_name),rid(l_rid),fid(l_fid)
		{
		}

		AddFactionArg(const AddFactionArg &rhs)
			: name(rhs.name),rid(rhs.rid),fid(rhs.fid) { }

		Rpc::Data *Clone() const { return new AddFactionArg(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const AddFactionArg *r = dynamic_cast<const AddFactionArg *>(&rhs);
			if (r && r != this)
			{
				name = r->name;
				rid = r->rid;
				fid = r->fid;
			}
			return *this;
		}

		AddFactionArg& operator = (const AddFactionArg &rhs)
		{
			const AddFactionArg *r = &rhs;
			if (r && r != this)
			{
				name = r->name;
				rid = r->rid;
				fid = r->fid;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << name;
			os << rid;
			os << fid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> name;
			os >> rid;
			os >> fid;
			return os;
		}

	};
};
#endif
