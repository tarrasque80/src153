#ifndef __GNET_DBUPDATEPLAYERCROSSINFOARG_RPCDATA
#define __GNET_DBUPDATEPLAYERCROSSINFOARG_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class DBUpdatePlayerCrossInfoArg : public GNET::Rpc::Data
	{
	public:
		int roleid;
		int remote_roleid;
		int userid;
		int remote_zoneid;

	public:
		DBUpdatePlayerCrossInfoArg (int l_roleid = 0,int l_remote_roleid = 0,int l_userid = 0
			,int l_remote_zoneid = 0)
			: roleid(l_roleid),remote_roleid(l_remote_roleid),userid(l_userid)
			,remote_zoneid(l_remote_zoneid)
		{
		}

		DBUpdatePlayerCrossInfoArg(const DBUpdatePlayerCrossInfoArg &rhs)
			: roleid(rhs.roleid),remote_roleid(rhs.remote_roleid),userid(rhs.userid),
			remote_zoneid(rhs.remote_zoneid) { }

		Rpc::Data *Clone() const { return new DBUpdatePlayerCrossInfoArg(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBUpdatePlayerCrossInfoArg *r = dynamic_cast<const DBUpdatePlayerCrossInfoArg *>(&rhs);
			if (r && r != this)
			{
				roleid = r->roleid;
				remote_roleid = r->remote_roleid;
				userid = r->userid;
				remote_zoneid = r->remote_zoneid;
			}
			return *this;
		}

		DBUpdatePlayerCrossInfoArg& operator = (const DBUpdatePlayerCrossInfoArg &rhs)
		{
			const DBUpdatePlayerCrossInfoArg *r = &rhs;
			if (r && r != this)
			{
				roleid = r->roleid;
				remote_roleid = r->remote_roleid;
				userid = r->userid;
				remote_zoneid = r->remote_zoneid;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << remote_roleid;
			os << userid;
			os << remote_zoneid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> remote_roleid;
			os >> userid;
			os >> remote_zoneid;
			return os;
		}

	};
};
#endif
