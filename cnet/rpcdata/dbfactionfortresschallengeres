#ifndef __GNET_DBFACTIONFORTRESSCHALLENGERES_RPCDATA
#define __GNET_DBFACTIONFORTRESSCHALLENGERES_RPCDATA

#include "rpcdefs.h"

#include "gmailsyncdata"

namespace GNET
{
	class DBFactionFortressChallengeRes : public GNET::Rpc::Data
	{
	public:
		int retcode;
		GMailSyncData syncdata;

	public:
		DBFactionFortressChallengeRes (int l_retcode = 0,const GMailSyncData& l_syncdata = GMailSyncData())
			: retcode(l_retcode),syncdata(l_syncdata)
		{
		}

		DBFactionFortressChallengeRes(const DBFactionFortressChallengeRes &rhs)
			: retcode(rhs.retcode),syncdata(rhs.syncdata) { }

		Rpc::Data *Clone() const { return new DBFactionFortressChallengeRes(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBFactionFortressChallengeRes *r = dynamic_cast<const DBFactionFortressChallengeRes *>(&rhs);
			if (r && r != this)
			{
				retcode = r->retcode;
				syncdata = r->syncdata;
			}
			return *this;
		}

		DBFactionFortressChallengeRes& operator = (const DBFactionFortressChallengeRes &rhs)
		{
			const DBFactionFortressChallengeRes *r = &rhs;
			if (r && r != this)
			{
				retcode = r->retcode;
				syncdata = r->syncdata;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << syncdata;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> syncdata;
			return os;
		}

	};
};
#endif
