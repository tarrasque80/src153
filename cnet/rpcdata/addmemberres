#ifndef __GNET_ADDMEMBERRES_RPCDATA
#define __GNET_ADDMEMBERRES_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class AddMemberRes : public GNET::Rpc::Data
	{
	public:
		int retcode;
		Octets name;
		char cls;
		int level;
		int reputation;
		unsigned char reincarn_times;
		unsigned char gender;

	public:
		AddMemberRes (int l_retcode = -1,const Octets& l_name = Octets(0),char l_cls = 0
			,int l_level = 0,int l_reputation = 0,unsigned char l_reincarn_times = 0
			,unsigned char l_gender = 0)
			: retcode(l_retcode),name(l_name),cls(l_cls)
			,level(l_level),reputation(l_reputation),reincarn_times(l_reincarn_times)
			,gender(l_gender)
		{
		}

		AddMemberRes(const AddMemberRes &rhs)
			: retcode(rhs.retcode),name(rhs.name),cls(rhs.cls),
			level(rhs.level),reputation(rhs.reputation),reincarn_times(rhs.reincarn_times),
			gender(rhs.gender) { }

		Rpc::Data *Clone() const { return new AddMemberRes(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const AddMemberRes *r = dynamic_cast<const AddMemberRes *>(&rhs);
			if (r && r != this)
			{
				retcode = r->retcode;
				name = r->name;
				cls = r->cls;
				level = r->level;
				reputation = r->reputation;
				reincarn_times = r->reincarn_times;
				gender = r->gender;
			}
			return *this;
		}

		AddMemberRes& operator = (const AddMemberRes &rhs)
		{
			const AddMemberRes *r = &rhs;
			if (r && r != this)
			{
				retcode = r->retcode;
				name = r->name;
				cls = r->cls;
				level = r->level;
				reputation = r->reputation;
				reincarn_times = r->reincarn_times;
				gender = r->gender;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << name;
			os << cls;
			os << level;
			os << reputation;
			os << reincarn_times;
			os << gender;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> name;
			os >> cls;
			os >> level;
			os >> reputation;
			os >> reincarn_times;
			os >> gender;
			return os;
		}

	};
};
#endif
