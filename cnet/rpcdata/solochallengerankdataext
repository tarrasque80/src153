#ifndef __GNET_SOLOCHALLENGERANKDATAEXT_RPCDATA
#define __GNET_SOLOCHALLENGERANKDATAEXT_RPCDATA

#include "rpcdefs.h"

#include "solochallengerankdata"

namespace GNET
{
	class SoloChallengeRankDataExt : public GNET::Rpc::Data
	{
	public:
		int update_time;
		SoloChallengeRankDataVector data;
		int zoneid;
		int reserved1;
		int reserved2;
		int reserved3;

	public:
		SoloChallengeRankDataExt (int l_update_time = 0,const SoloChallengeRankDataVector& l_data = SoloChallengeRankDataVector(),int l_zoneid = 0
			,int l_reserved1 = 0,int l_reserved2 = 0,int l_reserved3 = 0)
			: update_time(l_update_time),data(l_data),zoneid(l_zoneid)
			,reserved1(l_reserved1),reserved2(l_reserved2),reserved3(l_reserved3)
		{
		}

		SoloChallengeRankDataExt(const SoloChallengeRankDataExt &rhs)
			: update_time(rhs.update_time),data(rhs.data),zoneid(rhs.zoneid),
			reserved1(rhs.reserved1),reserved2(rhs.reserved2),reserved3(rhs.reserved3) { }

		Rpc::Data *Clone() const { return new SoloChallengeRankDataExt(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const SoloChallengeRankDataExt *r = dynamic_cast<const SoloChallengeRankDataExt *>(&rhs);
			if (r && r != this)
			{
				update_time = r->update_time;
				data = r->data;
				zoneid = r->zoneid;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
			}
			return *this;
		}

		SoloChallengeRankDataExt& operator = (const SoloChallengeRankDataExt &rhs)
		{
			const SoloChallengeRankDataExt *r = &rhs;
			if (r && r != this)
			{
				update_time = r->update_time;
				data = r->data;
				zoneid = r->zoneid;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << update_time;
			os << data;
			os << zoneid;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> update_time;
			os >> data;
			os >> zoneid;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			return os;
		}

	};
};
#endif
