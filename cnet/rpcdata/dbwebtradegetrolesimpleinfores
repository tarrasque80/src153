#ifndef __GNET_DBWEBTRADEGETROLESIMPLEINFORES_RPCDATA
#define __GNET_DBWEBTRADEGETROLESIMPLEINFORES_RPCDATA

#include "rpcdefs.h"

#include "rolesimpleinfo"

namespace GNET
{
	class DBWebTradeGetRoleSimpleInfoRes : public GNET::Rpc::Data
	{
	public:
		int retcode;
		std::vector<RoleSimpleInfo> roles;

	public:
		DBWebTradeGetRoleSimpleInfoRes (int l_retcode = 0,const std::vector<RoleSimpleInfo>& l_roles = std::vector<RoleSimpleInfo>())
			: retcode(l_retcode),roles(l_roles)
		{
		}

		DBWebTradeGetRoleSimpleInfoRes(const DBWebTradeGetRoleSimpleInfoRes &rhs)
			: retcode(rhs.retcode),roles(rhs.roles) { }

		Rpc::Data *Clone() const { return new DBWebTradeGetRoleSimpleInfoRes(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBWebTradeGetRoleSimpleInfoRes *r = dynamic_cast<const DBWebTradeGetRoleSimpleInfoRes *>(&rhs);
			if (r && r != this)
			{
				retcode = r->retcode;
				roles = r->roles;
			}
			return *this;
		}

		DBWebTradeGetRoleSimpleInfoRes& operator = (const DBWebTradeGetRoleSimpleInfoRes &rhs)
		{
			const DBWebTradeGetRoleSimpleInfoRes *r = &rhs;
			if (r && r != this)
			{
				retcode = r->retcode;
				roles = r->roles;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << roles;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> roles;
			return os;
		}

	};
};
#endif
